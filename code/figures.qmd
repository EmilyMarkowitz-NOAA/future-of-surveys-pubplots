---
title: "Publication Plots"
editor: source
author:
  - name: Emily Markowitz
    orcid: 0000-0001-5757-4230
    email: Emily.Markowitz@noaa.gov 
    note: https://github.com/afsc-gap-products
    affiliations:
      - name: NOAA Fisheres Alaska Fisheries Science Center
    department: Groundfish Assessment Program, Bering Sea Survey Team
  - name: Catherine Foley
    orcid: 0000-0003-3664-074X
    email: Catherine.Foley@noaa.gov 
    note: https://github.com/noaa-nefsc
    affiliations:
      - name: NOAA Fisheres Northeast Fisheries Science Center
department: Ecosystem Surveys Branch, Bottom Trawl Survey Program
date: "`r paste0(format(Sys.time(), '%B %d, %Y'))`"
format: html
toc: true
toc-location: right
toc-depth: 3
number-sections: true
message: FALSE
warning: FALSE
error: FALSE
comment: FALSE
echo: FALSE
fig-height: 6
fig-width: 6
---

```{r setup}
knitr::opts_chunk$set(
  echo = FALSE, warning = FALSE, error = FALSE, message = FALSE, 
  tab.cap.style = "Table Caption", 
  tab.cap.pre = "Table", 
  tab.cap.sep = ". --", 
  fig.cap.style = "Image Caption",
  fig.cap.pre = "Figure ", 
  fig.cap.sep = ". -- ", 
  fig.align = 'center')
```

```{r load-libraries, include = FALSE}
PKG <- c("devtools", "googledrive", "ggplot2", 
         "magrittr", "here", "dplyr", "sf", "readxl", 
         "janitor", "stringr")
for (p in PKG) {
  if(!require(p,character.only = TRUE)) {  
    install.packages(p, verbose = FALSE)
    require(p,character.only = TRUE)}
}
```


```{r google-drive-sign-in, include = FALSE}
# SIGN INTO GOOGLE DRIVE--------------------------------------------------------
googledrive_dl <- TRUE
googledrive::drive_deauth()
googledrive::drive_auth()
2
```

```{r load-data, echo = FALSE}
# Download google spreadsheet --------------------------------------------------
googledrive_dl <- "https://docs.google.com/spreadsheets/d/1l6a9Wb3M1PQV9UwHk7Ddfiiuq5U5lVW5"

googledrive::drive_download(file = googledrive::as_id(googledrive_dl),  #"gap_survey_progression.csv",
                            # type = "xlsx", 
                            overwrite = TRUE, 
                            path = here::here("data/data.xlsx"))

classifiers <- readxl::read_xlsx(path = here::here("data/data.xlsx"), 
                                 sheet = "Classifiers", 
                                 skip = 1) %>% 
  janitor::clean_names() 

# Clean classifiers ------------------------------------------------------------

classifiers <- classifiers %>% 
  dplyr::select("gear_type", # "gear_type_condensed", 
                "research_field", # "research_field_condensed", 
                "location", #"location_lat", "location_lon", 
                "organism", # "organism_condensed", 
                "survey") %>%
  tidyr::pivot_longer(cols = c("gear_type", # "gear_type_condensed", 
                "research_field", # "research_field_condensed", 
                "location", #"location_lat", "location_lon", 
                "organism", # "organism_condensed", 
                "survey"), 
                names_to = "var", values_to = "val") %>% 
  dplyr::left_join(classifiers %>% 
                     dplyr::filter(!is.na(location)) %>% 
                     dplyr::select(val = location, 
                                   val_lat = location_lat, 
                                   val_lon = location_lon) %>% 
                     dplyr::mutate(var = "location"))

dat <- readxl::read_xlsx(path = here::here("data/data.xlsx"), 
                         sheet = "Papers", 
                         skip = 1)

# Clean data -------------------------------------------------------------------

dat <- dat %>% 
  janitor::clean_names() %>% 
  dplyr::select(
    orig_order, 
    authors, 
    article_title, 
    source_title, 
    document_type, 
    # keywords_plus, 
    author_keywords, 
    abstract, 
    affiliations, 
    publication_year, 
    doi_link, 
    dplyr::starts_with("gear_type"), 
    dplyr::starts_with("research_field"), 
    dplyr::starts_with("location"), 
    dplyr::starts_with("survey"),
    gear_type_condensed,
    research_field_condensed,
    organism_condensed,
    organism,
    include
  ) %>% 
  dplyr::select(-dplyr::ends_with("_condensed"))

# Pivot data from categories ---------------------------------------------------

dat_descr <- dplyr::bind_rows(
  
  dat %>%
    dplyr::filter(include == "YES") %>% 
    dplyr::select(orig_order, 
                  publication_year, 
                  dplyr::starts_with("gear_type")) %>% 
    tidyr::pivot_longer(cols = dplyr::starts_with("gear_type"), 
                        names_pattern = "gear_type(.*)", 
                        names_to = "col",
                        values_to = "val") %>% 
    dplyr::mutate(var ="gear_type"), 
  
  # dat %>%
  #   dplyr::filter(include == "YES") %>% 
  #   dplyr::select(orig_order, 
  #                 publication_year, 
  #                 gear_type_condensed) %>% 
  #   tidyr::pivot_longer(cols = gear_type_condensed, 
  #                       names_to = "col",
  #                       values_to = "val") %>% 
  #   dplyr::mutate(var ="gear_type_condensed"), 
  
  dat %>%
    dplyr::filter(include == "YES") %>% 
    dplyr::select(orig_order, 
                  publication_year, 
                  dplyr::starts_with("research_field")) %>% 
    tidyr::pivot_longer(cols = dplyr::starts_with("research_field"), 
                        names_pattern = "research_field(.*)", 
                        names_to = "col",
                        values_to = "val") %>% 
    dplyr::mutate(var ="research_field"), 
  
  # dat %>%
  #   dplyr::filter(include == "YES") %>% 
  #   dplyr::select(orig_order, 
  #                 publication_year, 
  #                 research_field_condensed) %>% 
  #   tidyr::pivot_longer(cols = research_field_condensed, 
  #                       names_to = "col",
  #                       values_to = "val") %>% 
  #   dplyr::mutate(var ="research_field_condensed"), 
  
  dat %>%
    dplyr::filter(include == "YES") %>% 
    dplyr::select(orig_order, 
                  publication_year, 
                  dplyr::starts_with("location")) %>% 
    tidyr::pivot_longer(cols = dplyr::starts_with("location"), 
                        names_pattern = "location(.*)", 
                        names_to = "col",
                        values_to = "val") %>% 
    dplyr::mutate(var ="location"), 
  
  # dat %>%
  # dplyr::filter(include == "YES") %>% 
  # dplyr::select(orig_order, 
  #               publication_year, 
  #               location_condensed) %>% 
  # tidyr::pivot_longer(cols = location_condensed, 
  #                     names_to = "col",
  #                     values_to = "val") %>% 
  # dplyr::mutate(var ="location_condensed"), 
  
  dat %>%
    dplyr::filter(include == "YES") %>% 
    dplyr::select(orig_order, 
                  publication_year, 
                  dplyr::starts_with("survey")) %>% 
    tidyr::pivot_longer(cols = dplyr::starts_with("survey"), 
                        names_pattern = "survey(.*)", 
                        names_to = "col",
                        values_to = "val") %>% 
    dplyr::mutate(var ="survey"),  
  
  dat %>%
    dplyr::filter(include == "YES") %>% 
    dplyr::select(orig_order, 
                  publication_year, 
                  val = organism) %>% 
    dplyr::mutate(var ="organism")#,
  
  # dat %>%
  #   dplyr::filter(include == "YES") %>% 
  #   dplyr::select(orig_order, 
  #                 publication_year, 
  #                 organism_condensed) %>% 
  #   tidyr::pivot_longer(cols = organism_condensed, 
  #                       names_to = "col",
  #                       values_to = "val") %>% 
  #   dplyr::mutate(var ="organism_condensed")
  ) %>% 
  
  dplyr::select(-dplyr::ends_with("col")) %>% 
  
  # add in columns from orig column
  dplyr::bind_rows(dat %>%
                     dplyr::filter(include == "YES") %>% 
                     dplyr::select(orig_order, publication_year, val = document_type) %>% 
                     dplyr::mutate(var = "document_type")) %>% 
  dplyr::bind_rows(dat %>%
                     dplyr::filter(include == "YES") %>% 
                     dplyr::select(orig_order, publication_year, val = source_title) %>% 
                     dplyr::mutate(var = "source_title")) # %>%   
# tidyr::pivot_longer(cols = "publication_year", document_type)


# Category condense function ---------------------------------------------------
data_condense <- function(dat_descr, variable, list0){
  
  list00<-list0
  for (i in 1:length(list0)){
    list00[[i]] <- paste0('c(', paste0('"', list00[[i]], '"', collapse = ', '), ')')
  }
  
  
  eval(parse(text=
paste0('dat_temp <- dat_descr %>%
    dplyr::filter(var == "',variable,'" & !is.na(val)) %>%
    dplyr::mutate(
      val0 = val,
      var = paste0("',variable,'_condensed"),
val = dplyr::case_when(',
                    paste0('val %in% ', 
                           list00,
                           ' ~ "', names(list00), '"', collapse = ",\n\n"),
                    ', \n\nTRUE ~ "Other"
                    ))')
))

temp <- paste0(sort(unique(dat_temp$val0[dat_temp$val == "Other"])), collapse = ", ")
str0 <- paste0(variable, " condensed: what is in 'Other': ", ifelse(temp == "", "None", temp))
print(str0)

dat_descr <- dplyr::bind_rows(dat_descr, dat_temp)

return(list("dat_descr" = dat_descr, 
            "dat_temp" = dat_temp, 
        "str0" = str0))
}

# Research field condensed -----------------------------------------------------

list0 <- list(
  "Population Biology/Stock Assessment" = 
    c("Population Model", "Model-Based Indicies", "Design-based indicies", "Population Biology/Stock Assessment",  
                               "Taxonomy", "Histology", "Otolith", "Food web model", "Recruitment"), 
  "Management (Quantitative)" = c("Stock Assessment Model", "Reference points", "TACC Thresholds", "Harvest Control Rules", "Bycatch", "Management (Quantitative)"),
  "Life History" = "Life History", 
  "Ecosystems" = c("Ecosystem-based management", "Essential Fish Habitat", "Spatial Ecology", "Ecosystems"),
  "Oceanography" = c("Oceanography"), 
  "Genetics" = c("Genetics"), 
  "Social Sciences" = c("Socio-Econ", "Economics", "Social Sciences"), 
  "Spatial Ecology" = c("Species Distribution Model"), 
  "Methods/Statistics/Design" = c("Combine Surveys", "Combine with Dependant", "Survey Design", 
                               "Survey Statistics", "Catchability", "Sampling design", "Uncertainty", "Emerging Methods", "Methods/Statistics/Design"), 
  "System Distruption" = c("Wind Farm mitigation", "COVID-19", "Survey Mitigation", "Oil spill"), 
  "Climate change" = c("Climate change"), 
  "Conservation" = c("MPA"), 
  "Data availability" = c("Data availability"), 
  "Review/Editorial" = c("Review", "Editorial"), 
  "Outreach and Communication" = c("Outreach and Communication")
  )

aaa <- data_condense(dat_descr, variable = "research_field", list0)
dat_descr <- aaa$dat_descr

# dat_res <- dat_descr %>%
#     dplyr::filter(var == "research_field" & !is.na(val)) %>%
#     dplyr::mutate(
#       val0 = val, 
#       var = "research_field_condensed",
#                   val = dplyr::case_when(
#                     val %in% c("Population Model", "Model-Based Indicies", "Design-based indicies", "Population Biology/Stock Assessment",  
#                                "Taxonomy", "Histology", "Otolith", "Food web model", "Recruitment") ~ 
#                       "Population Biology/Stock Assessment",
#                     val %in% c("Stock Assessment Model", "Reference points", "TACC Thresholds", "Harvest Control Rules", "Bycatch", "Management (Quantitative)") ~ 
#                       "Management (Quantitative)",
#                     val %in% c("Life History") ~ 
#                       "Life History",
#                     val %in% c("Ecosystem-based management", "Essential Fish Habitat", "Spatial Ecology", "Ecosystems") ~ 
#                       "Ecosystems",
#                     val %in% c("Oceanography") ~ 
#                       "Oceanography",
#                     val %in% c("Genetics") ~ 
#                       "Genetics",
#                     val %in% c("Socio-Econ", "Economics", "Social Sciences") ~ 
#                       "Social Sciences",
#                     val %in% c("Species Distribution Model") ~ 
#                       "Spatial Ecology",
#                     val %in% c("Combine Surveys", "Combine with Dependant", "Survey Design", 
#                                "Survey Statistics", "Catchability", "Sampling design", "Uncertainty", "Emerging Methods", "Methods/Statistics/Design") ~ 
#                       "Methods/Statistics/Design",
#                     val %in% c("Wind Farm mitigation", "COVID-19", "Survey Mitigation", "Oil spill") ~ 
#                       "System Distruption",
#                     val %in% c("Climate change") ~ 
#                       "Climate Change",
#                     val %in% c("MPA") ~ 
#                       "Conservation", 
#                     val %in% c("Data availability") ~ 
#                       "Data availability", 
#                     val %in% c("Review", "Editorial") ~ 
#                       "Review/Editorial", 
#                     val %in% c("Outreach and Communication") ~ 
#                       "Outreach and Communication",
#                     TRUE ~ "Other"
#                     ))
# 
# temp <- paste0(sort(unique(dat_res$val0[dat_res$val == "Other"])), collapse = ", ")
# paste0("Research Field Condensed: what is in 'Other': ", ifelse(temp == "", "None", temp))
# 
# dat_descr <- dplyr::bind_rows(dat_descr, dat_res)

# Gear type condensed -----------------------------------------------------

list0 <- list(
"Mobile Gear" = c("Ichthyoplankton", "Pelagic net", 
                               "Poly Nor’Eastern, four-seam, hard bottom, high-rise bottom trawl (AFSC BTS AI & GOA)", 
                               "Beach seine", "Bottom Trawl", "Beam Trawl", 
                               "Otter Trawl", 
                               "Gillnets", "Longline", "Bongo net", "Manta tow"), 
"Fixed Gear" = c("Grab samples", "Traps", "Hook & Line"), 
"Advanced Tech" = c("Still camera", "Video", 
                               "3D stereo camera (e.g., stereo-baited remote underwater video (S-BRUV))",
                               "Advanced Tech","Aerial survey", "Uncrewed surface vehicle saildrone"), 
"Fisheries Dependent" = c("Fisheries-Dependant"), 
"Acoustic" = c("Acoustics"), 
"Diver" = c("underwater visual census"), 
"Tagging" = c("Satellite tags", "Capture–recapture"), 
"Stock assessments" = c("Stock assessments"), 
"Wind farms" = c("Wind farms"),   
"Fisher interviews" = c("Fisher interviews"),  
"None" = c("None"), 
"Multiple" = c("Multiple"))

aaa <- data_condense(dat_descr, variable = "gear_type", list0)
dat_descr <- aaa$dat_descr

# dat_geartype <- dat_descr %>%
#     dplyr::filter(var == "gear_type" & !is.na(val)) %>%
#     dplyr::mutate(var = "gear_type_condensed",
#        val0 = val, 
#                  val = dplyr::case_when(
#                     val %in% c("Ichthyoplankton", "Pelagic net", 
#                                "Poly Nor’Eastern, four-seam, hard bottom, high-rise bottom trawl (AFSC BTS AI & GOA)", 
#                                "Beach seine", "Bottom Trawl", "Beam Trawl", 
#                                "Otter Trawl", 
#                                "Gillnets", "Longline", "Bongo net", "Manta tow") ~ 
#                       "Mobile Gear",
#                     val %in% c("Grab samples", "Traps", "Hook & Line") ~ 
#                       "Fixed Gear",
#                     val %in% c("Still camera", "Video", 
#                                "3D stereo camera (e.g., stereo-baited remote underwater video (S-BRUV))",
#                                "Advanced Tech","Aerial survey", "Uncrewed surface vehicle saildrone") ~ 
#                       "Advanced Tech",
#                     val %in% c("Fisheries-Dependant") ~ 
#                       "Fisheries Dependent",
#                     val %in% c("Acoustics") ~ 
#                       "Acoustic",
#                     val %in% c("underwater visual census") ~ 
#                       "Diver",
#                     val %in% c("Satellite tags", "Capture–recapture") ~ 
#                       "Tagging",
#                     val %in% c("Stock assessments") ~ "Stock assessments",  
#                     val %in% c("Wind farms") ~ "Wind farms",  
#                     val %in% c("Fisher interviews") ~ "Fisher interviews",  
#                     val %in% c("None") ~ "None",  
#                     val %in% c("Multiple") ~ "Multiple",
#                     TRUE ~ "Other"))
# 
# temp <- paste0(sort(unique(dat_geartype$val0[dat_geartype$val == "Other"])), collapse = ", ")
# paste0("Gear type Condensed: what is in 'Other': ", ifelse(temp == "", "None", temp))
# 
# dat_descr <- dplyr::bind_rows(dat_geartype, dat_res)

# location condensed -----------------------------------------------------------

list0 <- list(
"NW Atlantic" = c("Mid-NW Atlantic", "NW Atlantic", "South-NW Atlantic"), 
"NE Atlantic" = c("Azores", "Celtic Sea", "NE Atlantic", "Iberian Coast"),
"SE Atlantic" = c("South Africa"),
"SW Atlantic" = c("Brazil"), 
"Caribbean" = c("Caribbean"), 
"NE Pacific" = c("Alaska", "NE Pacific", "Pacific West Coast"), 
"NW Pacific" = c("China", "Russia"), 
"SW Pacific" = c("Tasman Sea", "Coral Sea", "Arafura Sea", "Great Australian Bight"), 
"Central Pacific" = c("Hawaii"), 
"Southern Ocean" = c("Southern Ocean"), 
"North Sea" = c("English Channel", "Greater North Sea"), 
"Mediterranean Sea" = c("Adriatic Sea", "Mediterranean Sea"), 
"Baltic Sea" = c("Baltic Sea"), 
"Gulf of Mexico" = c("Gulf of Mexico"), 
"Arctic Ocean" = c("Barents Sea"), 
"Global" = "Global",
"Simulation" = "Simulation")

aaa <- data_condense(dat_descr, variable = "location", list0)

dat_descr <- aaa$dat_descr

# dat_loc <- dat_descr %>% 
#     dplyr::filter(var == "location" & !is.na(val)) %>% 
#     dplyr::mutate(var = "location_condensed",
#        val0 = val, 
#                   val = dplyr::case_when(
#                     val %in% c("Mid-NW Atlantic", "NW Atlantic", "South-NW Atlantic") ~ 
#                       "NW Atlantic",
#                     val %in% c("Azores", "Celtic Sea", "NE Atlantic", "Iberian Coast") ~ 
#                       "NE Atlantic",
#                     val %in% c("South Africa") ~ 
#                       "SE Atlantic",
#                     val %in% c("Brazil") ~ 
#                       "SW Atlantic",
#                     val %in% c("Caribbean") ~ 
#                       "Caribbean",
#                     val %in% c("Alaska", "NE Pacific", "Pacific West Coast") ~ 
#                       "NE Pacific",
#                     val %in% c("China", "Russia") ~ 
#                       "NW Pacific",
#                     val %in% c("Tasman Sea", "Coral Sea", "Arafura Sea", "Great Australian Bight") ~ 
#                       "SW Pacific",
#                     val %in% c("Hawaii") ~ 
#                       "Central Pacific",
#                     val %in% c("Southern Ocean") ~ 
#                       "Southern Ocean",
#                     val %in% c("English Channel", "Greater North Sea") ~ 
#                       "North Sea",
#                     val %in% c("Adriatic Sea", "Mediterranean Sea") ~ 
#                       "Mediterranean Sea",
#                     val %in% c("Baltic Sea") ~ 
#                       "Baltic Sea",
#                     val %in% c("Gulf of Mexico") ~ 
#                       "Gulf of Mexico",
#                     val %in% c("Barents Sea") ~ 
#                       "Arctic Ocean",
#                     val %in% c("Global") ~ "Global",
#                     val %in% c("Simulation") ~ "Simulation",
#                       TRUE ~ "Other"))
# 
# 
# temp <- paste0(sort(unique(dat_loc$val0[dat_loc$val == "Other"])), collapse = ", ")
# paste0("Location Condensed: what is in 'Other': ", ifelse(temp == "", "None", temp))
# 
# dat_descr <- dplyr::bind_rows(dat_loc, dat_res)

classifiers_temp <- 
  data.frame(
    var = "location_condensed",
  val  = c("NW Atlantic", "NE Atlantic", "Caribbean", "NE Pacific", "NW Pacific", 
                          "SW Pacific", "Central Pacific", "Southern Ocean", 
                          "North Sea", "Mediterranean Sea", 
                          "Southern Ocean", "Baltic Sea", "Gulf of Mexico", "Arctic Ocean", 
                          "SE Atlantic", "SW Atlantic", 
                          "Global", "Simulation", "Other"),
  val_lat = c(43.292702, 49.80919, 15.41066, 53.199042, 56.728246, 
                             35.995232, 23.845024, -52.791454, 
                             61.764, 35.689542, 
              -64.822538, 58.42283, 25.116756, 83.954235,
                             -20.161551, -28.943148, 
                             -11.67696, -39.625135, 61.552865),
  val_lon = c(-50.260647, -19.147368, -66.959865, -166.803612, 167.708109, 
                             150.305766, 177.727639, 75.268651, 
                             -2.084405, 17.559606, 
                             36.290404,	19.569313, -89.265027, 38.138635, 
                             -4.220581, -35.070190,
                             -149.731341, -147.797747, 98.435668) ) 

classifiers <- classifiers_temp %>% 
  dplyr::bind_rows(classifiers)

print(paste0("In classifiers, not in category: ", paste0(setdiff(classifiers_temp$val, names(list0)), collapse = ", ")))
print(paste0("In category, not in : classifiers", paste0(setdiff(names(list0), classifiers_temp$val), collapse = ", ")))

# Clean key data ---------------------------------------------------------------

# Create key word categories ---------------------------------------------------

dat_temp <- dat %>%
  dplyr::filter(!(include %in% c("NO", "DUPLICATE", "MAYBE"))) %>%
  dplyr::select(author_keywords, publication_year, orig_order) %>%
  tidyr::separate(col = "author_keywords", sep = "; ", remove = FALSE, into = paste0("key_", 1:10)) %>% 
  dplyr::select(-author_keywords) %>%
  tidyr::pivot_longer(cols = paste0("key_", 1:10), names_to = "key_var", values_to = "val") %>%
  dplyr::select(-key_var) %>% 
  dplyr::filter(!is.na(val)) %>% 
  dplyr::mutate(
    var = "keywords", 
    val = tolower(val), 
                val = gsub(x = val, pattern = "-", replacement = " "))

temp <- sort(unique(dat_temp$val))

dat_descr <- dplyr::bind_rows(dat_descr, dat_temp)
find_words <- function(word, where) {
  temp <- c()
  for (i in 1:length(word)){
    temp <- c(temp, 
              where[grepl(x = where, ignore.case = TRUE, pattern = word[i])])
  }
 return(sort(unique(temp)))
}

list0 <- list(
# "BTS" = c(find_words(where = dat_temp$val, word = "bottom trawl")), 
"Longline" = c(find_words(where = dat_temp$val, word = c("longline"))), 
"BTS" = c(find_words(where = dat_temp$val, word = c("bottom trawl"))), 
"ATS" = c(find_words(where = dat_temp$val, word = c("acoustic", "echo", "sonar"))), 
"Ring nets" = c(find_words(where = dat_temp$val, word = c("ring nets"))), 
"Trap" = c(find_words(where = dat_temp$val, word = c("trap"))), 
"Taxonomy" = c(find_words(where = dat_temp$val, word = c("taxonom", "synchrony"))),
"Transboundary" = c(find_words(where = dat_temp$val, word = c("transboundary"))),


"Polcy" = c(find_words(where = dat_temp$val, word = c("policy"))), 
"Management" = c(find_words(where = dat_temp$val, word = c("management", "msa", "strategy framework", "lme", "marine stewardship"))),
"Conservation" = c(find_words(where = dat_temp$val, word = c("restoration", "conservation", "protected", "rare", "species of concern"))),

"Disasters" = c(find_words(where = dat_temp$val, word = c("exxon valdez", "weather", "oil spill", "oil"))), 
"COVID-19" = c(find_words(where = dat_temp$val, word = "covid")), 
"wind farm" = c(find_words(where = dat_temp$val, word = "wind farm")), 
"Stock assessment" = c(find_words(where = dat_temp$val, word = 
                                    c("stock", "assessment", "hcr", "harvest control rule", "reference points", 
                                                                 "allowable commercial catch", "allowable catch", 
                                      "tac", "trip limit"))), 

"Fishery dependent" = c(find_words(where = dat_temp$val, word = c("fishery dependent"))), 
"Fishery independent" = c(find_words(where = dat_temp$val, word = c("fishery independent"))), 
"Recreational fisheries" = c(find_words(where = dat_temp$val, word = c("angler", "recreational", "catch and release"))), 

"Oceanography" = c(find_words(where = dat_temp$val, word = c("thermocline", "rugosity", "nutrient and carbon cycling"))), 
"Satellite data" = c(find_words(where = dat_temp$val, word = c("lidar", "satellite"))), 
"Oceanography" = c(find_words(where = dat_temp$val, word = c("thermocline", "rugosity", "nutrient and carbon cycling"))), 


"Stakeholder" = c(find_words(where = dat_temp$val, word = c("stakeholder"))), 
"Survey design" = c(find_words(where = dat_temp$val, word = 
                                 c("design", "survey est", "footrope", "stratification",  "fixed station", 
                                   "area swept", 
                                   "net spread", "survey optomization", "stratified random", "mesh size"))), 
"Samples" = c(find_words(where = dat_temp$val, word = c("sampl", "voucher"))), 

"Modeling" = c(find_words(where = dat_temp$val, word = 
                            c("model", "variable", "variance", "parsimony", 
                              "autocorrelation", "optimization", "equation", "statistic", 
                              "likelihood", 
                                                         "prediction", "analysis", "randomization"))), 
"Camera" = c(find_words(where = dat_temp$val, word = c("camera", "video", "television", "photography"))), 
"Economics" = c(find_words(where = dat_temp$val, word = c("econom", "socio", "interview", " mail", "questionnaire"))), 
"Bycatch" = c(find_words(where = dat_temp$val, word = c("bycatch", "by catch"))), 
"Indicies" = c(find_words(where = dat_temp$val, word = c("index", "indic", "catch per unit effort", "cpue", "biomass", "abundance","population"))), 
"USV" = c(find_words(where = dat_temp$val, word = c("uncrewed surface vehicle", "usv"))), 
"Ecology" = c(find_words(where = dat_temp$val, word = c("preditor", "prey", "ecolog", "preditor", "niche", "adaptation"))), 
"Evolution" = find_words(where = dat_temp$val, word = c("evolution")),
"Diversity" = c(find_words(where = dat_temp$val, word = 
                             c("richness", "diversity", "species composition"))), 
"Life history" = c(find_words(where = dat_temp$val, word = 
                                c("spawn", "settlement", "sex", "nurseries", "year class", 
                                  "larv", "egg", "reproduc", "migration", "breeding", "mortality", 
                                  "maturity", "fecundity", "life history", "recruitment",
                                  "young of year"))), 
"Morphometrics" = c(find_words(where = dat_temp$val, word = c("morphomet", "body mass", "body size"))), 
"Age and growth" = c(find_words(where = dat_temp$val, word = c("otolith", "age", "length"))), 

"Food habits" = c(find_words(where = dat_temp$val, word = c("stomach", "food habit"))), 
"Species distribution" = c(find_words(where = dat_temp$val, word = c("habitat suitability", "essential fish hab", "sdm", 
                                                                     "Spatiotemporal", "spatiotemp", "spatio temp", "habitat mapping",
                                                                     "species distribution", "spatial distribution"))), 
"Genetics" = c(find_words(where = dat_temp$val, word = c("geneti", "mitochondrial", "genome"))), 
"Temperature" = c(find_words(where = dat_temp$val, word = c("heatwave", "temperature", "cold pool"))), 
"Catchability" = c(find_words(where = dat_temp$val, word = c("catchability"))), 
"Diving" = c(find_words(where = dat_temp$val, word = c("diving"))), 
"Traffic light" = c(find_words(where = dat_temp$val, word = c("traffic light"))), 
"Tagging" = c(find_words(where = dat_temp$val, word = c("mark recapture", "tag", "transmitter", "telemetry"))), 

"Turtle" = c(find_words(where = dat_temp$val, word = c("turtle"))), 
"Fish" = c(find_words(where = dat_temp$val, word = c(" sole", " cod", " menhaden", "fish", " turbot", "thunnus", 
                                                     "salmon", "raja ", "flounder", "stickleback", "croaker", 
                                                     "grouper", "herring", "merluccius",
                                                     "marlin", "snapper", "rays", "sockeye", "sciaeni", "whiting", 
                                                     "teleost", "tilapia", "abalone", "tuna", "pollock", 
                                                     "alosa", 
                                                     "limanda"))), 

"Seaweed" = c(find_words(where = dat_temp$val, word = c("saccharina", "sea weed", "seaweed", "macroalgae", "alga"))),
"Urchin" = c(find_words(where = dat_temp$val, word = c("strongy", "urchin"))), 
"Lobster" = c(find_words(where = dat_temp$val, word = c("lobster", "jasus"))), 
"Crab" = c(find_words(where = dat_temp$val, word = c("crab"))), 
"Scallop" = c(find_words(where = dat_temp$val, word = c("scallop"))),
"Birds" = c(find_words(where = dat_temp$val, word = c("bird", "waterfowl", "abatross"))),
"Sponge" = c(find_words(where = dat_temp$val, word = c("sponge"))),
"Clam" = c(find_words(where = dat_temp$val, word = c("clam", "goeduck"))), 
"Coral" = c(find_words(where = dat_temp$val, word = c("coral", "reef"))), 
"Shrimp" = c(find_words(where = dat_temp$val, word = c("shrimp"))), 
"Oysters" = c(find_words(where = dat_temp$val, word = c("oyster"))), 
"Sharks" = c(find_words(where = dat_temp$val, word = c("shark"))), 
"Marine mammals" = c(find_words(where = dat_temp$val, word = c("mammals", "megafauna", "dolphin", "cetacean", "seal", "sea lion"))), 


"Data" = c(find_words(where = dat_temp$val, word = c("metadata", "access to information"))),

"Place Phrases" = c(find_words(where = dat_temp$val, word = c("atlantic", "gulf", "watershed", "pacific", "ocean", "channel", 
                                                              "shelf", "sea", "estuary", "strait", "bay", "canyon", "river", 
                                                              "south", "north", "east", "west", "central", "degrees e", "degrees n", 
                                                              "africa", "niger", "isles", "british columbia", 
                                                              "lake", "mangrove", 
                                                              "senegal", "uganda", "st lucia", "virgin islands", "louisiana", 
                                                              "st. croix", "texas", "washington", "state", "antarctic"))), 
"Other spatial phrases" = c(find_words(where = dat_temp$val, word = c("spatial"))), 
"Other trawl phrases" = c(find_words(where = dat_temp$val, word = c("trawl"))), 
"Other survey phrases" = c(find_words(where = dat_temp$val, word = c("survey"))) 
)

aaa <- data_condense(dat_descr, variable = "keywords", list0)

dat_descr <- aaa$dat_descr

# dat_key <- dat %>%
#   dplyr::filter(include == "YES") %>% 
#   dplyr::select(author_keywords, publication_year) %>%
#   tidyr::separate(col = "author_keywords", sep = "; ", remove = FALSE, into = paste0("key_", 1:10)) %>% 
#   dplyr::select(-author_keywords) %>%
#   tidyr::pivot_longer(cols = paste0("key_", 1:10), names_to = "key_var", values_to = "val") %>%
#   dplyr::select(-key_var) %>% 
#   dplyr::filter(!is.na(val)) %>% 
#   dplyr::mutate(val = tolower(val), 
#                 val = gsub(x = val, pattern = "-", replacement = " ") , 
#                 val1 = dplyr::case_when(
#                   grepl(x = val, pattern = "bottom trawl") ~ "BTS",
#                   grepl(x = val, pattern = "acoustic") ~ "ATS",
#                   grepl(x = val, pattern = "stock assess") ~ "Stock assessment",
#                   val == "fisheries" ~ "fisheries (and simlar)",
#                   val == "fishery" ~ "fisheries (and simlar)", 
#                   grepl(x = val, pattern = "coral") ~ "coral (and similar)", 
#                   grepl(x = val, pattern = "covid") ~ "covid-19", 
#                   # val == "fisheries" ~ "fisheries (and simlar)"
#                   # val == "fisheries" ~ "fisheries (and simlar)"
#                   TRUE ~ "Other"
#                 )
#   ) %>% 
#   tidyr::pivot_longer(cols = c("val", "val1"), names_to = "var", values_to = "val") %>% 
#   dplyr::mutate(var = ifelse(var == "val", "key", "key_condensed"))

dat_descr <- dplyr::bind_rows(dat_descr, dat_key)

# Clean Affiliation data -------------------------------------------------------

dat_aff <- dat %>% 
  dplyr::select(affiliations, publication_year) %>%
  tidyr::separate(col = "affiliations", sep = "; ", remove = FALSE, into = paste0("aff_", 1:30)) %>% 
  dplyr::select(-affiliations) %>%
  tidyr::pivot_longer(cols = paste0("aff_", 1:30), names_to = "aff_var", values_to = "val") %>%
  dplyr::select(-aff_var) %>% 
  dplyr::filter(!is.na(val)) %>% 
  dplyr::mutate(val1 = dplyr::case_when(
    grepl(x = val, ignore.case = TRUE, 
          pattern = "University") ~ "University", 
    grepl(x = val, ignore.case = TRUE, 
          pattern = "Universidad") ~ "University", 
    grepl(x = val, ignore.case = TRUE, 
          pattern = "Universita") ~ "University", 
    grepl(x = val, ignore.case = TRUE, 
          pattern = "Universite") ~ "University", 
    grepl(x = val, ignore.case = TRUE, 
          pattern = "College") ~ "University", 
    
    # grepl(x = val, pattern = "The World Bank") ~ "International governance",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "hospital") ~ "Medical",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "Medical") ~ "Medical",
    # Government
    val == "Alaska Department of Fish & Game" ~ "US State Government",    
    grepl(x = val, ignore.case = TRUE, 
          pattern = "National Oceanic and Atmospheric Administration") ~ "NOAA",    
    grepl(x = val, ignore.case = TRUE, 
          pattern = "NOAA") ~ "NOAA",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "United States ") ~ "Other US Government",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "NASA ") ~ "Other US Government",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "US  ") ~ "Other US Government",
    val == "Tennessee Valley Authority" ~ "Other US Government",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "U.S. ") ~ "Other US Government", 
    grepl(x = val, ignore.case = TRUE, 
          pattern = "The World Bank") ~ "International governance",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "India") ~ "Indian Government",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "Japan") ~ "Japanese Government",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "Canada") ~ "Canadian Government",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "Australia ") ~ "Australian Government",
    grepl(x = val, ignore.case = TRUE, 
          pattern = "Norwegian ") ~ "Norwegian Government",
    # Private Corporation
    val == "Shell" ~ "Private Corporation",  #  Oil Company
    TRUE ~ "Other"
  )) %>% 
  tidyr::pivot_longer(cols = c("val", "val1"), names_to = "var", values_to = "val") %>% 
  dplyr::mutate(var = ifelse(var == "val", "affiliation", "affiliation_condensed"))

dat_descr <- dplyr::bind_rows(dat_descr, dat_aff)

```

We conducted a literature review using the web of science citation system (search query: <https://www.webofscience.com/wos/woscc/summary/7f060455-0bd6-4643-bd2f-2de3ceedb0b2-f52da389/relevance/1>). To be included in this analysis, each paper had to contain a long-term fisheries survey or pilot study of a new study Our search returned `r format(x = nrow(dat), big.mark = ",")` entries, of which contained `r format(x = nrow(dat[dat$include == "DUPLICATE" & !is.na(dat$include),]), big.mark = ",")` duplicate results and `r format(x = nrow(dat[dat$include == "NO" & !is.na(dat$include),]), big.mark = ",")` irrelevant results, leaving `r format(x = nrow(dat[dat$include == "YES" & !is.na(dat$include),]), big.mark = ",")` relevant articles to categorize. The following categories were used in this analysis: 

```{r}
temp <- function(dat_descr, var, collapse = ", ") {
  temp <- paste0(sort(unique(dat_descr$val[dat_descr$var == var & 
                                             !is.na(dat_descr$var)])), 
                 collapse = collapse)
  return(temp)
}
```


**Gear Type**: 
`r temp(dat_descr = dat_descr, var = "gear_type")`

**Research topic**: 
`r temp(dat_descr = dat_descr, var = "research_field")`

**Location**: 
`r temp(dat_descr = dat_descr, var = "location")`

**Survey**: 
`r temp(dat_descr = dat_descr, var = "survey", collapse = "; \n")`

**Organism focus**: 
`r temp(dat_descr = dat_descr, var = "organism")`

<!-- figure_print base (just for making following plots consistent) -->

```{r figure_print-base, include = FALSE}
figure_base <- ggplot2::ggplot()  +
  theme_bw()  +
  ggplot2::theme(
    panel.border = element_rect(colour = "grey50", fill=NA, linewidth=.5),
    plot.margin=unit(c(0,0,0,0), "cm") ,
    panel.background = element_rect(fill = "white"), #grey95
    legend.position="bottom",
    legend.text = element_text(size = 5),
    legend.direction="horizontal",
    legend.justification="left",
    legend.background = element_blank(),
    legend.location = "right", 
    legend.key.spacing = unit(0.0010, 'cm'),
    legend.box.background = element_blank())

world_coordinates <- maps::map("world", plot = FALSE, fill = TRUE) %>%
  sf::st_as_sf() 
```

```{r auto-plot, include = FALSE}
auto_plot <- function(dat1, variable, other_cutoff = 0) {
  
    title0 <- paste0("Frequency and year, by ", gsub(pattern = "_", replacement = " ", x = variable))
  title0_cum <- paste0("Cummulative frequency and year, by ", gsub(pattern = "_", replacement = " ", x = variable))

  
  # make data wrangling easier -------------------------------------------------
  dat0 <- dat1  %>% 
    dplyr::filter(var == variable) %>% 
    dplyr::select(publication_year, val, var) %>% 
    dplyr::filter(!is.na(val))
  
  # get totals for whole timeseries --------------------------------------------
  dat_total <- dat0 %>% 
    dplyr::left_join(
      dat0 %>% 
        dplyr::group_by(val) %>% 
        dplyr::summarise(freq = n()) %>% 
        dplyr::ungroup() %>%
        dplyr::arrange(desc(freq)) %>%
        dplyr::mutate(val = ifelse(freq <= other_cutoff, "Other", val)) ) %>% 
    dplyr::group_by(val) %>% 
    dplyr::summarise(freq = n()) %>% 
    dplyr::ungroup() %>%
    dplyr::arrange(desc(freq)) %>% 
    dplyr::filter(!is.na(val)) %>% 
    dplyr::mutate(val1 = paste0(val, " (", freq, ")"))
  
  dat_total$val1 <- factor(x = dat_total$val1,
                           levels = unique(dat_total$val1), 
                           labels = unique(dat_total$val1), 
                           ordered = TRUE)
  
  # prepare frequency data for each year ---------------------------------------
  dat_total_by_year <- dat0 %>%
    dplyr::left_join(dat0 %>% # freq data for whole time series in paren
                       dplyr::group_by(val) %>%                   
                       dplyr::summarise(freq = n()) %>%
                       dplyr::ungroup() %>%
                       dplyr::arrange(desc(freq)) %>%
                       dplyr::mutate(val = ifelse(
                         freq <= other_cutoff, "Other", val))) %>%
    dplyr::group_by(publication_year, val) %>%
    dplyr::summarise(freq = n()) %>%
    dplyr::ungroup() %>%
    dplyr::arrange(desc(freq))  %>%
    dplyr::filter(!is.na(val)) %>%
    dplyr::left_join(dat_total %>%
                       dplyr::select(-freq)) %>% 
    dplyr::arrange(publication_year) %>% 
    dplyr::group_by(val) %>%
    dplyr::mutate(cum_freq = cumsum(freq)) %>%
    dplyr::ungroup() 
  
  # line plot ------------------------------------------------------------------
  figure_line <- figure_base + 
    ggplot2::geom_line(
      data = dat_total_by_year, 
      # show.legend = FALSE, 
      mapping = aes(x = publication_year, 
                    y = freq, 
                    color = val1), 
      linewidth = .75) + 
    ggplot2::scale_color_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                   direction = -1) + 
    xlab("Year") +
    ylab("Frequency") +
    ggtitle(title0) 
  
  ggsave(filename = here::here("output", paste0( variable,"-line.png")),
         plot = figure_line, width = 6, height = 6)
  
  # bar plot -------------------------------------------------------------------
  figure_bar <- figure_base + 
    ggplot2::geom_bar(data = dat_total_by_year, 
                      mapping = aes(x = publication_year,
                                    y = freq,
                                    fill=val1,
                                    color = val1),
                      position="stack",
                      stat="identity",
                      alpha = .5,
                      linewidth = .75) + 
    ggplot2::scale_color_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                   direction = -1) + 
    ggplot2::scale_fill_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                  direction = -1) + 
    xlab("Year") +
    ylab("Frequency") +
    ggtitle(title0) 
  
  ggsave(filename = here::here("output", paste0(variable,"-bar.png")),
         plot = figure_bar, width = 6, height = 6)
  
  # area plot ----------------------------------------------------------------
  figure_area <- figure_base + 
    ggplot2::geom_area(data = dat_total_by_year, 
                       mapping = aes(x = publication_year,
                                     y = freq,
                                     fill=val1)
                       # ,alpha = .5,
                       # size = .75) 
    )+ 
    ggplot2::scale_color_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                   direction = -1) + 
    ggplot2::scale_fill_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                  direction = -1) + 
    xlab("Year") +
    ylab("Frequency") +
    ggtitle(title0) 
  
  ggsave(filename = here::here("output", paste0(variable,"-area.png")),
         plot = figure_area, width = 6, height = 6)
  
  # cumline plot ---------------------------------------------------------------
  
  figure_cumline <- figure_base + 
    ggplot2::geom_line(data = dat_total_by_year,
                       mapping = aes(x = publication_year,
                                     y = cum_freq,
                                     color = val1),
                       linewidth = .75) +
    ggplot2::scale_color_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                   direction = -1) + 
    ggplot2::scale_fill_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                  direction = -1) + 
    xlab("Year") +
    ylab("Frequency") +
    ggtitle(title0_cum) 
  
  ggsave(filename = here::here("output", paste0(variable,"-cumline.png")),
         plot = figure_cumline, width = 6, height = 6)
  
  # cumbar plot ---------------------------------------------------------------
  figure_cumbar <- figure_base + 
    ggplot2::geom_bar(data = dat_total_by_year, 
                      mapping = aes(x = publication_year,
                                    y = cum_freq,
                                    fill=val1,
                                    color = val1),
                      position="stack",
                      stat="identity",
                      alpha = .5,
                      size = .75) +
    ggplot2::scale_color_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                   direction = -1) + 
    ggplot2::scale_fill_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                  direction = -1) + 
    xlab("Year") +
    ylab("Frequency") +
    ggtitle(title0_cum) 
  
  ggsave(filename = here::here("output", paste0(variable, "-cumbar.png")),
         plot = figure_cumbar, width = 6, height = 6)
  
  # cumarea plot ---------------------------------------------------------------
  figure_cumarea <- figure_base + 
    ggplot2::geom_area(data = dat_total_by_year, 
                       mapping = aes(x = publication_year,
                                     y = cum_freq,
                                     fill=val1)
                       # ,alpha = .5,
                       # size = .75) 
    )+ 
    ggplot2::scale_color_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                   direction = -1) + 
    ggplot2::scale_fill_viridis_d(name = "", option = "turbo", begin = .1, end = .7,
                                  direction = -1) + 
    xlab("Year") +
    ylab("Frequency") +
    ggtitle(title0_cum) 
  
  ggsave(filename = here::here("output", paste0(variable,"-cumarea.png")),
         plot = figure_cumarea, width = 6, height = 6)
  
  # frequency table ------------------------------------------------------------
  
  dat_total <- dat_total %>%
    dplyr::arrange(val) %>%
    dplyr::arrange(desc(freq)) %>% 
    dplyr::select(-val1) %>% 
    dplyr::rename("Category" = val, 
                  "Frequency" = freq)
  
  dat_print <- dat_total %>% 
    flextable::flextable() %>%
    flextable::theme_zebra() %>%
    flextable::width(width = c(5, 1))
  
  return(list("line_plot" = figure_line, 
              "bar_plot" = figure_bar,
              "area_plot" = figure_area,
              "cumline_plot" = figure_cumline,
              "cumbar_plot" = figure_cumbar,
              "cumarea_plot" = figure_cumarea,
              "table_print" = dat_print, 
              "table_raw" = dat_total))
}
```


```{r run-child, results = 'asis'}

temp <- sort(unique(dat_descr$var))
temp <- temp[temp != "affiliation"]

src <- list()
for (var0 in temp){
  src[[var0]] <- knitr::knit_expand(here::here('code/figures_child.qmd'))
}
```

`r paste(knitr::knit(text = unlist(src)), collapse = '\n')`
